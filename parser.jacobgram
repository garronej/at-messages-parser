%mode LALR

Program= 'ECHO' List function(echo, list){

        this.echo= echo;
        this.atMessageDescriptors= list;


}| List function(list){

        this.atMessageDescriptors= list;

}| 'ECHO' function(echo){

        this.echo= echo;
        this.atMessageDescriptors= [];

};

List= List Message function(list, message){

        list.push(message);

        return list;

} | Message function(message){

        return [ message ];

};

Message= 'SEP' Error Payload 'SEP' 'SEP' function(_, error, payload){

        payload.raw= "\r\n" + error.raw + payload.raw + "\r\n\r\n";

        payload.error= error;

        return payload;

} | 'SEP' Payload 'SEP' function(_, payload){

        payload.raw= "\r\n" + payload.raw + "\r\n";
        
        return payload;

} | 'SEP' Payload 'SEP' 'PDU' 'SEP' function(_, payload, _, pdu){

        payload.raw= "\r\n" + payload.raw + "\r\n" + pdu + "\r\n";

        payload.pdu= pdu;
        
        return payload;

} | 'SEP' FinalResultCode 'SEP' function(_, finalResultCode){

        finalResultCode.raw= "\r\n" + finalResultCode.raw + "\r\n";

        return finalResultCode;

};

FinalResultCode= Error | 'FINAL_RESULT_CODE' function(rawFinalResultCode){

        return {
                "raw": rawFinalResultCode,
                "id": rawFinalResultCode.replace(/\ /g, "_")
        };

};

Error= 'ERROR' function(){

        return {
                "id": "ERROR",
                "raw": "ERROR"
        }

} | 'CME_ERROR' function(code){

        return {
                "id": "CME_ERROR",
                "raw": "+CME ERROR: " + code.toString(),
                "code": code
        };

} | 'CMS_ERROR' function(code){

        return {
                "id": "CMS_ERROR",
                "raw": "+CMS ERROR: " + code.toString(),
                "code": code
        };

};


Payload= Rest function(rest){

        return { "raw": rest };

} | 'CNUM' Rest function(_, rest){

        //\r\n+CNUM: "CC","+8613987654321",129\r\n

        var match= rest.match(/^:\ ?"([a-zA-Z]*)","(\+?[0-9]*)",([0-9]*)$/);
        
        var isNational= undefined;

        if( match[3] === "129" ) isNational= true
        else if( match[3] === "145" ) isNational= false

        return {
                "raw": "+CNUM" + rest,
                "id": "CNUM",
                "alpha": match[1],
                "number": match[2],
                "isNational": isNational
        };

} | 'CMGR' Rest function(_, rest){

        //\r\n+CMGR: 0,,26\r\n07913306092069F0040B913336766883F5000061216232414440084EF289EC26BBC9\r\n

        var match= rest.match(/^:\ ?([0-9]+),[0-9]*,([0-9]+)$/);

        return {
                "id": "CMGR",
                "raw": "+CMGR"+rest,
                "stat": parseInt(match[1]),
                "length": parseInt(match[2])
        };

} | 'CMTI' Rest function(_, rest){

        //\r\n+CMTI: "SM",29\r\n
        
        var match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);

        return {
                "id": "CMTI",
                "raw": "+CMTI"+rest,
                "mem": match[1],
                "index": parseInt(match[2])
        };

} | 'BOOT' Rest function(_, rest){

        return {
                "id": "BOOT",
                "raw": "^BOOT" + rest
        };

} | 'RSSI' Rest function(_, rest){

        return {
                "id": "RSSI",
                "raw": "^RSSI" + rest
        };

} | 'CPIN' Rest function(_, rest ){

        return {
                "id": "CPIN",
                "raw": "+CPIN" + rest,
                "pinState": rest.match(/^:\ ?([\ A-Z]+)$/)[1].replace(/\ /g, "_")
        }

} | 'SIMST' Rest function(_, rest){

        var match= rest.match(/^:\ ?([0-9]+)(?:,([01]))?$/);

        var lock= undefined;

        if( match[2] !== undefined ) lock= (match[2] === "1")

        return {
                "id": "SIMST",
                "raw": "^SIMST" + rest,
                "simState": parseInt(match[1]),
                "lock": lock
        };


} | 'SRVST' Rest function(_, rest){

        return {
                "id": "SRVST",
                "raw": "^SRVST" + rest,
                "serviceStatus": parseInt(rest.match(/^:\ ?([0-9]+)$/)[1])
        };
} | 'CMEE' Rest function(_, rest){

        return {
                "id": "CMEE",
                "raw": "+CMEE" + rest,
                "reportMode": parseInt(rest.match(/^:\ ?([0-9]+)$/)[1])
        };

};

Rest= Rest 'CHAR' function(rest, char){

        rest+= char;

        return rest;

} | 'CHAR' function(char){

        return char;

};

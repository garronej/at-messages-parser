%%

final=OK|CONNECT|RING|NO\sCARRIER|NO\sDIALTONE|BUSY|NO\sANSWER|COMMAND\sNOT\sSUPPORT|TOO\sMANY\sPARAMETERS|ERROR
        
%%

<> . {}

<UNSOLICITED> \r\n(\+|\^)[A-Z]+ {
        "use strict";
        
        let id= this.jjtext.substring(2);

        if( this.defs.atIdsUnso.indexOf(id) < 0 ){
                this.jjval= this.jjtext;
                return "UNPARSED";
        }

        this.pushState("REST");

        this.jjval= id;

        if( this.defs.atIdsPdu.indexOf(id) >= 0 ){
                this.expectPdu= true;
                return "ID_UNSO_PDU";
        }else return "ID_UNSO";

}

<UNSOLICITED> (\r|\n|.) {

        this.jjval= this.jjtext;

        return "UNPARSED";
}


<REGULAR> \r\n(\+|\^)[A-Z]+ {
        
        this.jjval= this.jjtext.substring(2);

        if( 
                this.jjval === this.defs.atIds.CME_ERROR || 
                this.jjval === this.defs.atIds.CMS_ERROR 
        ) return "ID_ES_ERROR";

        this.pushState("REST");

        if( this.defs.atIdsPdu.indexOf(id) >= 0 ){
                this.expectPdu= true;
                return "ID_PDU";
        }else return "ID";

}

<REGULAR> \r\n{final}\r\n {
        this.jjval= this.jjtext.substring(2,this.jjtext.length-2)
        return "FINAL";
}

<REGULAR> (\r|\n|.) {
        this.jjval= this.jjtext;
        return "UNPARSED";
}



<REST> .*\r\n {

        this.popState();

        if( this.expectPdu ){
                this.expectPdu= false;
                this.pushState("PDU");
        }

        this.jjval = this.jjtext.slice(0, -2);

        return "REST";
}

<PDU> [a-fA-F0-9]+\r\n {

        this.popState();

        this.jjval= this.jjtext.slice(0, -2);

        return "PDU";
}
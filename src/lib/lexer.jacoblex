%%
%%

<> NEVER {}





<UNSO> (\r|\n|.) {

        this.jjval= this.jjtext;

        return "UNPARSED";
}

<UNSO> \r\n(\+|\^)[A-Z]+.*(\r\n[a-fA-F0-9]+)?/\r\n {

        //console.log("MESSAGE UNSO", JSON.stringify(this.jjtext));

        var match= this.jjtext.match(/^\r\n([\+\^][A-Z]+)/);
        
        var id= match[1];

        if( this.defs.atIdsUnso.indexOf(id) < 0 ){
                this.jjval= this.jjtext;
                return "UNPARSED";
        }


        this.jjtextPrev= this.jjtext;

        this.pushState("UNSO_END");

}

<UNSO_END> \r\n {

        this.popState();

        var regExp= /^(\r\n([\+\^][A-Z]+)(.*)(?:\r\n([a-fA-F0-9]+))?\r\n)$/;

        this.jjval= (this.jjtextPrev + "\r\n").match(regExp);

        /*
        console.log("MESSAGE END", 
        JSON.stringify(this.jjtextPrev+ "\r\n"), 
        JSON.stringify(this.jjval)
        );
        */

        return "MESSAGE";

}


<RESP> (\r|\n|.) {

        //console.log("UNPARSED FUCK", JSON.stringify(this.jjtext));

        this.jjval= this.jjtext;
        
        return "UNPARSED";
}

<RESP> ^ATE0\r {

        this.jjval= this.jjtext;

        return "ECHO";

}

<RESP> \r\n>\s/$ {

        //console.log("INVITE", JSON.stringify(this.jjtext));

        this.jjval= this.jjtext;

        return "INVITE";
}

<RESP> \r\n(\+|\^)[A-Z]+.*(\r\n[a-fA-F0-9]+)?\r\n\r\nOK\r\n {

        //console.log("MESSAGE", JSON.stringify(this.jjtext));
        var regExp= /^(\r\n([\+\^][A-Z]+)(.*)(?:\r\n([a-fA-F0-9]+))?\r\n)(\r\nOK\r\n)?$/;

        this.jjval= this.jjtext.match(regExp);

        return "MESSAGE";

}


<LIST_CNUM> (\r|\n|.) {

        this.jjval= this.jjtext;
        
        return "UNPARSED";
}

<LIST_CNUM> \r\n/\+CME\sERROR:\s?.+\+CNUM {

        this.pushState("LIST_CNUM_EXPECT");

        return "START_LIST_CNUM";

}

<LIST_CNUM> \r\n/ERROR\+CNUM {

        this.pushState("LIST_CNUM_EXPECT");

        return "START_LIST_CNUM";

}

<LIST_CNUM> \r\n/\+CNUM {

        this.pushState("LIST_CNUM_EXPECT");

        return "START_LIST_CNUM";

}


<LIST_CNUM_EXPECT> .+\r\n {

        this.jjval= this.jjtext;

        return "CNUM";

}

<LIST_CNUM_EXPECT> \r\n\r\nOK\r\n {

        this.popState();

        return "END_LIST_CNUM";
}




<LIST_CMGL> (\r|\n|.) {

        this.jjval= this.jjtext;
        
        return "UNPARSED";
}


<LIST_CMGL> /\r\n\+CMGL {

        this.pushState("LIST_CMGL_EXPECT");

}

<LIST_CMGL_EXPECT> \r\n\+CMGL:\s?.+\r\n[a-fA-F0-9]+ {

        this.jjval= this.jjtext;

        return "CMGL";

}

<LIST_CMGL_EXPECT> \r\n\r\nOK\r\n {

        this.popState();

        this.jjval= this.jjtext;

        return "END_LIST_CMGL";

}



<FINAL> (\r|\n|.) {

        this.jjval= this.jjtext;
        
        return "UNPARSED";
}


<FINAL> \r\n.+\r\n {

        if( this.jjtext.match(/^\r\n\+CM[ES]\ ERROR/) ){

                this.jjval= this.jjtext;

                return "CM_ERROR";

        }
        
        var id= this.jjtext.substring(2, this.jjtext.length-2);

        if( this.defs.atIdsFinal.indexOf(id) < 0 || id === this.defs.atIds.OK ){
                this.jjval= this.jjtext;
                return "UNPARSED";
        }

        this.jjval= id;

        return "FINAL";

}
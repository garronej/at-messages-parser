%mode LALR

Program= Instructions;

Instructions= Instructions Instruction | Instruction;

Instruction= Message | ListCMGL | ListCNUM | Final
| 'UNPARSED' function(unparsed){

    this.leftToParse+= unparsed;

} | 'ECHO' function(raw){

    this.atMessages.push(new this.bl.AtMessage(raw, this.bl.atIdDict.ECHO));

} | 'INVITE' function(raw){

    this.atMessages.push(new this.bl.AtMessage(raw, this.bl.atIdDict.INVITE));

};

Message= 'MESSAGE' function(full_raw_token_rest_pdu_ok) {
    "use strict";

    let full= full_raw_token_rest_pdu_ok[0];
    let raw= full_raw_token_rest_pdu_ok[1];
    let token= full_raw_token_rest_pdu_ok[2];
    let rest= full_raw_token_rest_pdu_ok[3];
    let pdu= full_raw_token_rest_pdu_ok[4]
    let ok= full_raw_token_rest_pdu_ok[5];
    
    let AtImps= this.bl.AtImps, AtMessage= this.bl.AtMessage;
    
    let atMessage;
    let match;
    switch (token) {
        case "+CMTI":
            match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
            if( !match ) break;
            atMessage = new AtImps.P_CMTI_URC(
                raw,
                match[1],
                parseInt(match[2])
            );
            break;
        case "+CDSI":
            match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
            if( !match ) break;
            atMessage = new AtImps.P_CDSI_URC(
                raw,
                match[1],
                parseInt(match[2])
            );
            break;
        case "^SIMST":
            match= rest.match(/^:\ ?([0-9]+)(?:,([01]))?$/);
            if( !match ) break;
            var lock= undefined;
            if( match[2] !== undefined ) lock= (match[2] === "1")
                atMessage = new AtImps.CX_SIMST_URC(
                    raw,
                    parseInt(match[1]),
                    lock
                );
            break;
        case "^SRVST":
            match= rest.match(/^:\ ?([0-9]+)$/);
            if( !match ) break;
            atMessage = new AtImps.CX_SRVST_URC(
                raw,
                parseInt(match[1])
            );
            break;
        case "^MODE":
            match= rest.match(/^:\ ?([0-9]+),([0-9]+)$/);
            if( !match ) break;
            atMessage= new AtImps.CX_MODE_URC(
                raw,
                parseInt(match[1]),
                parseInt(match[2])
            );
            break;
        case "+CMT":
            match= rest.match(/^:\ ?(?:.+)?,([0-9]+)$/);
            if( !match ) break;
            atMessage = new AtImps.P_CMT_URC(
                raw,
                parseInt(match[1]),
                pdu
            );
            break;
        case "+CDS":
            match= rest.match(/^:\ ?([0-9]+)$/);
            if( !match ) break;
            atMessage = new AtImps.P_CDS_URC(
                raw,
                parseInt(match[1]),
                pdu
            );
            break;
        case "+CMGR":
            match= rest.match(/^:\ ?([0-9]+),[0-9]*,([0-9]+)$/);
            if( !match ) break;
            atMessage = new AtImps.P_CMGR_SET(
                raw,
                parseInt(match[1]),
                parseInt(match[2]),
                pdu
            );
            break;
        case "+CPIN":
            match= rest.match(/^:\ ?([\ A-Z]+)$/);
            if( !match ) break;
            atMessage = new AtImps.P_CPIN_READ(
                raw,
                match[1]
            );
            break;
        case "+CMEE":
            match= rest.match(/^:\ ?([0-9]+)$/);
            if( !match ) break;
            atMessage = new AtImps.P_CMEE_READ(
                raw,
                parseInt(match[1])
            );
            break;
        case "^CPIN":
            match= rest.match(/^:\ ?([\ A-Z]+),((?:[0-9]+)?),([0-9]+),([0-9]+),([0-9]+),([0-9]+)$/);
            if( !match ) break;
            var times= undefined;
            if( match[2] !== "" ) times= parseInt(match[2]);
            atMessage = new AtImps.CX_CPIN_READ(
                raw,
                match[1],
                times,
                parseInt(match[3]),
                parseInt(match[4]),
                parseInt(match[5]),
                parseInt(match[6])
            );
            break;
        case "^SYSINFO":
            match= rest.match(/:\ ?([0-9]+),([0-9]+),(0|1),([0-9]+),([0-9]+)(?:,(0|1)?(?:,([0-9]+))?)?$/);
            if( !match ) break;
            var cardLock= undefined;
            if( match[6] !== undefined ) cardLock= ( match[6] === "1" );
            var sysSubMode= undefined;
            if( match[7] !== undefined ) sysSubMode= parseInt(match[7]);
            atMessage = new AtImps.CX_SYSINFO_EXEC(
                raw,
                parseInt(match[1]),
                parseInt(match[2]),
                match[3] === "1",
                parseInt(match[4]),
                parseInt(match[5]),
                cardLock,
                sysSubMode
            );
            break;
        case "+CMGS":
            match= rest.match(/^:\ ?([0-9]+)(?:,.*)?/);
            if( !match ) break;
            atMessage = new AtImps.P_CMGS_SET(
                raw,
                parseInt(match[1])
            );
            break;
        case "+CPBS":
            match= rest.match(/:\ ?"([A-Z]{2})"(?:,([0-9]+)?(?:,([0-9]+))?)?$/);
            if( !match ) break;
            var used= undefined;
            if( match[2] !== undefined ) used= parseInt(match[2]);
            var total= undefined;
            if( match[3] !== undefined ) total= parseInt(match[3]);
            atMessage= new AtImps.P_CPBS_READ(
                raw,
                match[1],
                used,
                total
            );
            break;
        case "+CPBR":
            if( match= rest.match(/^:\ ?([0-9]+),"([^"]*)",([0-9]+),"(.*)"$/) ){
                atMessage= new AtImps.P_CPBR_EXEC(
                    raw,
                    parseInt(match[1]),
                    match[2],
                    parseInt(match[3]),
                    match[4]
                );
                break;
            }
            if( match= rest.match(/:\ ?\(([0-9]+)-([0-9]+)\),([0-9]+),([0-9]+)/) ){
                atMessage= new AtImps.P_CPBR_TEST(
                    raw,
                    [ parseInt(match[1]), parseInt(match[2]) ],
                    parseInt(match[3]),
                    parseInt(match[4])
                );
                break;
            }
        case "+CMGL":
            match= rest.match(/^:\ ?\(([0-9]+)-([0-9]+)\)$/);
            if( !match ) break;
            atMessage= new AtImps.P_CMGL_TEST(
                raw,
                [parseInt(match[1]), parseInt(match[2])]
            );
            break;
        default: 
            if( this.bl.isUnso(token) )
                atMessage= new AtMessage(raw, this.bl.tokenToId(token));
    }
    
    if( !atMessage ) return this.leftToParse+= full;
    
    this.atMessages.push(atMessage);
    
    if( ok ) this.atMessages.push(new AtMessage(ok, this.bl.atIdDict.OK));

};



ListCMGL= ListRawCMGL 'END_LIST_CMGL' function(listRawCMGL) {
    "use strict";

    let AtMessage= this.bl.AtMessage;
    let AtMessageList= this.bl.AtMessageList;
    let AtImps= this.bl.AtImps;

    let atMessages= [];
    let regExp= /^\r\n\+CMGL:\ ?([0-9]+),([0-9]+),(?:[0-9]+)?,([0-9]+)\r\n([a-fA-F0-9]+)$/;
    let raw= "";

    for( let rawCMGL of listRawCMGL){

        raw+= rawCMGL;

        let match= rawCMGL.match(regExp);

        atMessages.push(new AtImps.P_CMGL_SET(rawCMGL,
           parseInt(match[1]),
           parseInt(match[2]),
           parseInt(match[3]),
           match[4]
        ));

    }

    raw+="\r\n";

    this.atMessages.push(new AtMessageList(raw, atMessages));
    this.atMessages.push(new AtMessage("\r\nOK\r\n", this.bl.atIdDict.OK));

};

ListRawCMGL= ListRawCMGL 'CMGL' function(listRaw, raw){

    listRaw.push(raw);

    return listRaw;

} | 'CMGL' function(raw){

    return [ raw ];

};


ListCNUM= 'START_LIST_CNUM' ListRawCNUM 'END_LIST_CNUM' function(_, listRawCNUM){
    "use strict";

    let AtMessage= this.bl.AtMessage;
    let AtMessageList= this.bl.AtMessageList;
    let AtImps= this.bl.AtImps;

    let atMessages= [];

    let raw= "\r\n";

    for( let rawCNUM of listRawCNUM ){

        raw+= rawCNUM;

        let split= rawCNUM.split("+CNUM");

        let rawError= split[0];
        let rest= split[1];

        let match= rest.match(/^:\ ?"(.*)","([^"]*)",([0-9]+)/);

        let atMessageCNUM= new AtImps.P_CNUM_EXEC("+CNUM"+rest,
            match[1],
            match[2],
            parseInt(match[3])
        );

        atMessages.push(atMessageCNUM);

        if( !rawError ) continue;

        let error;
        let token= "ERROR";
        let info;

        if( match= rawError.match(/^(\+CME\ ERROR):\ ?(.+)$/) ){

            token= match[1];

            info= parseInt(match[2]);

            if( isNaN(info) ) info= match[2];

        }

        switch (token) {
            case "+CME ERROR":
                error = new AtImps.P_CME_ERROR(rawError, info);
                break;
            case "ERROR":
                error= new AtImps.ERROR(rawError);
                break;
        }

        delete error.isFinal;

        atMessageCNUM.raw= error.raw + atMessageCNUM.raw;

        atMessageCNUM.error= error;

    }

    raw+= "\r\n";

    this.atMessages.push(new AtMessageList(raw, atMessages));

    this.atMessages.push(new AtMessage("\r\nOK\r\n", this.bl.atIdDict.OK));

};

ListRawCNUM= ListRawCNUM 'CNUM' function(listRaw, raw){

    listRaw.push(raw);

    return listRaw;

} | 'CNUM' function(raw){

    return [ raw ];

};

Final= 'FINAL' function(token){

    this.atMessages.push(new this.bl.AtMessage(
        "\r\n"+token+"\r\n", 
        this.bl.tokenToId(token)
    ));
} | 'ERROR' function(raw){

    this.atMessages.push(new this.bl.AtImps.ERROR(raw));

} | 'CM_ERROR' function(raw){
    "use strict";

    let AtImps= this.bl.AtImps;

    let atMessage;

    let match= raw.match(/^\r\n(\+CM[ES]\ ERROR):\ ?(.+)\r\n$/);

    let token= match[1];
    let info= parseInt(match[2]);

    if( isNaN(info) ) info= match[2];

    switch (token) {
        case "+CME ERROR":
            atMessage = new AtImps.P_CME_ERROR(raw, info);
            break;
        case "+CMS ERROR":
            atMessage = new AtImps.P_CMS_ERROR(raw, info);
            break;
    }

    this.atMessages.push(atMessage);

} | 'CONNECT' function(raw){

    var match= raw.match(/^\r\nCONNECT\ ?([0-9]+)\r\n$/);

    this.atMessages.push(new this.bl.AtImps.CONNECT(
        raw, 
        parseInt(match[1])
    ));

};
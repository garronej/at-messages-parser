%mode LALR

Program= Instructions;


Instructions= Instructions Instruction | Instruction;

Instruction= Message | ListCMGL | ListCNUM | Final
| 'UNPARSED' function(unparsed){

        this.leftToParse+= unparsed;

} | 'ECHO' function(raw){

        this.atMessages.push(new this.defs.AtMessage(this.defs.atIds.ECHO, raw));

} | 'INVITE' function(raw){

        this.atMessages.push(new this.defs.AtMessage(this.defs.atIds.INVITE, raw));
};

Message= 'MESSAGE' function(full_raw_id_rest_pdu_ok) {
        "use strict";

        let full= full_raw_id_rest_pdu_ok[0];
        let raw= full_raw_id_rest_pdu_ok[1];
        let id= full_raw_id_rest_pdu_ok[2];
        let rest= full_raw_id_rest_pdu_ok[3];
        let pdu= full_raw_id_rest_pdu_ok[4]
        let ok= full_raw_id_rest_pdu_ok[5];

        let atIds= this.defs.atIds;
        let AtImps= this.defs.AtImps;
        let AtMessage= this.defs.AtMessage;

        let atMessage;
        let match;
        switch (id) {
                case atIds.CMTI:
                        match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.CMTI(raw,
                                match[1],
                                parseInt(match[2])
                        );
                        break;
                case atIds.CDSI:
                        match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.CDSI(raw,
                                match[1],
                                parseInt(match[2])
                        );
                        break;
                case atIds.HUAWEI_SIMST:
                        match= rest.match(/^:\ ?([0-9]+)(?:,([01]))?$/);
                        if( !match ) break;
                        var lock= undefined;
                        if( match[2] !== undefined ) lock= (match[2] === "1")
                        atMessage = new AtImps.HUAWEI_SIMST(raw,
                                parseInt(match[1]),
                                lock
                        );
                        break;
                case atIds.HUAWEI_SRVST:
                        match= rest.match(/^:\ ?([0-9]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.HUAWEI_SRVST(raw,
                                parseInt(match[1])
                        );
                        break;
                case atIds.HUAWEI_MODE:
                        match= rest.match(/^:\ ?([0-9]+),([0-9]+)$/);
                        if( !match ) break;
                        atMessage= new AtImps.HUAWEI_MODE(raw,
                                parseInt(match[1]),
                                parseInt(match[2])
                        );
                        break;
                case atIds.CMT:
                        match= rest.match(/^:\ ?(?:.+)?,([0-9]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.CMT(raw,
                                parseInt(match[1]),
                                pdu
                        );
                        break;
                case atIds.CDS:
                        match= rest.match(/^:\ ?([0-9]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.CDS(raw,
                                parseInt(match[1]),
                                pdu
                        );
                        break;
                case atIds.CMGR:
                        match= rest.match(/^:\ ?([0-9]+),[0-9]*,([0-9]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.CMGR(raw,
                                parseInt(match[1]),
                                parseInt(match[2]),
                                pdu
                        );
                        break;
                case atIds.CPIN:
                        match= rest.match(/^:\ ?([\ A-Z]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.CPIN(raw,
                                match[1]
                        );
                        break;
                case atIds.CMEE:
                        match= rest.match(/^:\ ?([0-9]+)$/);
                        if( !match ) break;
                        atMessage = new AtImps.CMEE(raw,
                                parseInt(match[1])
                        );
                        break;
                case atIds.HUAWEI_CPIN:
                        match= rest.match(/^:\ ?([\ A-Z]+),((?:[0-9]+)?),([0-9]+),([0-9]+),([0-9]+),([0-9]+)$/);
                        if( !match ) break;
                        var times= undefined;
                        if( match[2] !== "" ) times= parseInt(match[2]);
                        atMessage = new AtImps.HUAWEI_CPIN(raw,
                                match[1],
                                times,
                                parseInt(match[3]),
                                parseInt(match[4]),
                                parseInt(match[5]),
                                parseInt(match[6])
                        );
                        break;
                case atIds.HUAWEI_SYSINFO:
                        match= rest.match(/:\ ?([0-9]+),([0-9]+),(0|1),([0-9]+),([0-9]+)(?:,(0|1)?(?:,([0-9]+))?)?$/);
                        if( !match ) break;
                        var cardLock= undefined;
                        if( match[6] !== undefined ) cardLock= ( match[6] === "1" );
                        var sysSubMode= undefined;
                        if( match[7] !== undefined ) sysSubMode= parseInt(match[7]);
                        atMessage = new AtImps.HUAWEI_SYSINFO(raw,
                                parseInt(match[1]),
                                parseInt(match[2]),
                                match[3] === "1",
                                parseInt(match[4]),
                                parseInt(match[5]),
                                cardLock,
                                sysSubMode
                        );
                        break;
                case atIds.CMGS:
                        match= rest.match(/^:\ ?([0-9]+)(?:,.*)?/);
                        if( !match ) break;
                        atMessage = new AtImps.CMGS(raw,
                                parseInt(match[1])
                        );
                        break;
                case atIds.CPBS:
                        match= rest.match(/:\ ?"([A-Z]{2})"(?:,([0-9]+)?(?:,([0-9]+))?)?$/);
                        if( !match ) break;
                        var used= undefined;
                        if( match[2] !== undefined ) used= parseInt(match[2]);
                        var total= undefined;
                        if( match[3] !== undefined ) total= parseInt(match[3]);
                        atMessage= new AtImps.CPBS(raw,
                                match[1],
                                used,
                                total
                        );
                        break;
                case atIds.CPBR:
                        if( match= rest.match(/^:\ ?([0-9]+),"([^"]*)",([0-9]+),"([^"]*)"$/) ){
                                atMessage= new AtImps.CPBR(raw,
                                        parseInt(match[1]),
                                        match[2],
                                        parseInt(match[3]),
                                        match[4]
                                );
                                break;
                        }
                        if( match= rest.match(/:\ ?\(([0-9]+)-([0-9]+)\),([0-9]+),([0-9]+)/) ){
                                atMessage= new AtImps.CPBR_TEST(raw,
                                        [ parseInt(match[1]), parseInt(match[2]) ],
                                        parseInt(match[3]),
                                        parseInt(match[4])
                                );
                                break;
                        }
                case atIds.CMGL:
                        match= rest.match(/^:\ ?\(([0-9]+)-([0-9]+)\)$/);
                        if( !match ) break;
                        atMessage= new AtImps.CMGL_TEST(raw,
                                [parseInt(match[1]), parseInt(match[2])]
                        );
                        break;
                default: 
                        if( this.defs.atIdsUnso.indexOf(id) >= 0 )
                                atMessage = new AtMessage(id, raw);
        }

        if( !atMessage ) return this.leftToParse+= full;

        this.atMessages.push(atMessage);

        if( ok ) this.atMessages.push(new AtMessage(atIds.OK, ok));

};



ListCMGL= ListRawCMGL 'END_LIST_CMGL' function(listRawCMGL) {
        "use strict";

        let AtMessage= this.defs.AtMessage;
        let AtMessageList= this.defs.AtMessageList;
        let AtImps= this.defs.AtImps;
        let atIds= this.defs.atIds;

        let atMessages= [];
        let regExp= /^\r\n\+CMGL:\ ?([0-9]+),([0-9]+),(?:[0-9]+)?,([0-9]+)\r\n([a-fA-F0-9]+)$/;
        let raw= "";

        for( let rawCMGL of listRawCMGL){

                raw+= rawCMGL;

                let match= rawCMGL.match(regExp);

                atMessages.push(new AtImps.CMGL(rawCMGL,
                        parseInt(match[1]),
                        parseInt(match[2]),
                        parseInt(match[3]),
                        match[4]
                ));

        }

        raw+="\r\n";

        this.atMessages.push(new AtMessageList(raw, atMessages));
        this.atMessages.push(new AtMessage(atIds.OK, "\r\nOK\r\n"));


};

ListRawCMGL= ListRawCMGL 'CMGL' function(listRaw, raw){

        listRaw.push(raw);

        return listRaw;

} | 'CMGL' function(raw){

        return [ raw ];

};


ListCNUM= 'START_LIST_CNUM' ListRawCNUM 'END_LIST_CNUM' function(_, listRawCNUM){
        "use strict";

        let AtMessage= this.defs.AtMessage;
        let AtMessageList= this.defs.AtMessageList;
        let AtImps= this.defs.AtImps;
        let atIds= this.defs.atIds;

        let atMessages= [];

        let raw= "\r\n";

        for( let rawCNUM of listRawCNUM ){

                raw+= rawCNUM;

                let split= rawCNUM.split("+CNUM");

                let rawError= split[0];
                let rest= split[1];

                let match= rest.match(/^:\ ?"([^"]*)","([^"]*)",([0-9]+)/);

                let atMessageCNUM= new AtImps.CNUM("+CNUM"+rest,
                        match[1],
                        match[2],
                        parseInt(match[3])
                );

                atMessages.push(atMessageCNUM);

                if( !rawError ) continue;

                let error;
                let id= atIds.ERROR;
                let info;

                if( match= rawError.match(/^(\+CM[ES]\ ERROR):\ ?(.+)$/) ){

                        id= match[1];

                        info= parseInt(match[2]);

                        if( isNaN(info) ) info= match[2];

                }

                switch (id) {
                        case atIds.CME_ERROR:
                                error = new AtImps.CME_ERROR(rawError, info);
                                break;
                        case atIds.CMS_ERROR:
                                error = new AtImps.CMS_ERROR(rawError, info);
                                break;
                        case atIds.ERROR:
                                error= new AtMessage(atIds.ERROR, rawError);
                                break;
                }

                delete error.isFinal;

                atMessageCNUM.error= error;

        }

        raw+= "\r\n";

        this.atMessages.push(new AtMessageList(raw, atMessages));

        this.atMessages.push(new AtMessage(atIds.OK, "\r\nOK\r\n"));

};

ListRawCNUM= ListRawCNUM 'CNUM' function(listRaw, raw){

        listRaw.push(raw);

        return listRaw;

} | 'CNUM' function(raw){

        return [ raw ];

};


Final= 'FINAL' function(id){

        this.atMessages.push(new this.defs.AtMessage(id, "\r\n"+id+"\r\n"));

} | 'CM_ERROR' function(raw){
        "use strict";

         let atIds= this.defs.atIds;
         let AtImps= this.defs.AtImps;

         let atMessage;

         let match= raw.match(/^\r\n(\+CM[ES]\ ERROR):\ ?(.+)\r\n$/);

         let id= match[1];
         let info= parseInt(match[2]);

         if( isNaN(info) ) info= match[2];

         switch (id) {
                 case atIds.CME_ERROR:
                         atMessage = new AtImps.CME_ERROR(raw, info);
                         break;
                 case atIds.CMS_ERROR:
                         atMessage = new AtImps.CMS_ERROR(raw, info);
                         break;
         }

         this.atMessages.push(atMessage);


};
%mode LALR

Program= Instructions;

Instructions= Instructions Instruction
| Instruction;

Instruction= 'SEP' FinalResultCode 'SEP' function(_, message){

        message.raw= "\r\n" + message.raw + "\r\n";

        this.atMessageDescriptors.push(message);

} | 'SEP' ListMessageWrapMultiline 'SEP' function(_, messages){

        var raw= "\r\n";

        messages.forEach(function(message){
                raw+= message.raw;
        });

        raw+= "\r\n";

        this.atMessageDescriptors.push({
                "id": "AT LIST",
                "raw": raw,
                "atMessageDescriptors": messages
        });


} | 'SEP' MessageWrap 'SEP' function(_, message){

        message.raw= "\r\n" + message.raw + "\r\n";

        this.atMessageDescriptors.push(message);

} | 'SEP' 'INVITE' function(){

        this.atMessageDescriptors.push({
                "id": ">",
                "raw": "\r\n> "
        });

} | 'ECHO' function(atCommand){

        this.atMessageDescriptors.push({
                "id": "ECHO",
                "raw": atCommand
        });

} | ListCmgl 'SEP' function(messages){

        var raw= "";

        messages.forEach(function(message){
                raw+= message.raw;
        });

        raw+= "\r\n";

        this.atMessageDescriptors.push({
                "id": "AT LIST",
                "raw": raw,
                "atMessageDescriptors": messages
        });

};


ListCmgl= ListCmgl Cmgl function(messages, message){

        messages.push(message);

        return messages;

} | Cmgl function(message){

        return [ message ];

};


Cmgl= 'SEP' 'CMGL' 'REST' 'SEP' 'PDU' function(_ ,_ ,rest ,_ , pdu ){

        var match= rest.match(/^:\ ?([0-9]+),([0-9]+),(?:[0-9]+)?,([0-9]+)$/);

        return {
                "id": "+CMGL",
                "raw": "\r\n+CMGL" + rest + "\r\n" + pdu,
                "index": parseInt(match[1]),
                "stat": parseInt(match[2]),
                "length": parseInt(match[3]),
                "pdu": pdu
        };

};


ListMessageWrapMultiline=  ListMessageWrapMultiline MessageWrapMultiline function(messages, message){

        messages.push(message);
        return messages;

} | MessageWrapMultiline function(message){
        return [ message ];
};

MessageWrap= Message function(message){ return message; }
| Error Message function(error, message){

        message.raw= error.raw + message.raw;

        message.error= error;
        return message;
};

MessageWrapMultiline= KnownMessageMultiLine function(message){ return message; } 
| Error KnownMessageMultiLine function(error, message){

        message.raw= error.raw + message.raw;

        message.error= error;
        return message;
};

 
Message= KnownMessage function(message){ return message; }
| KnownMessagePdu function(message){ return message; }
| UnknownMessage function(message){ return message; };


FinalResultCode= Error | 'FINAL_RESULT_CODE' function(finalResultCode){

        return {
                "raw": finalResultCode,
                "id": finalResultCode
        };

};

Error= 'ERROR' function(){

        return {
                "id": "ERROR",
                "raw": "ERROR"
        };

} | 'CME_ERROR' function(code){

        return {
                "id": "+CME ERROR",
                "raw": "+CME ERROR: " + code.toString(),
                "code": code
        };

} | 'CMS_ERROR' function(code){

        return {
                "id": "+CMS ERROR",
                "raw": "+CMS ERROR: " + code.toString(),
                "code": code
        };

};

UnknownMessage= 'REST' function(rest){
        return { "raw": rest };
};

KnownMessageMultiLine= 'ID_MULTILINE' 'REST' 'SEP' function(id, rest){

        var atMessageDescriptor= {
                "id": id,
                "raw": id + rest + "\r\n"
        };

        switch(atMessageDescriptor.id){
                case "+CNUM":
                        var match= rest.match(/^:\ ?"([^"]*)","([^"]*)",([0-9]+).*$/);
                        var isNational= undefined;
                        if( match[3] === "129" ) isNational= true
                        else if( match[3] === "145" ) isNational= false
                        Object.assign( atMessageDescriptor, {
                                "alpha": match[1],
                                "number": match[2],
                                "isNational": isNational
                        });
                        break;
                default:
        }

        return atMessageDescriptor;

};

KnownMessagePdu= 'ID_PDU' 'REST' 'SEP' 'PDU' function(id, rest, _, pdu){

        var atMessageDescriptor= {
                "id": id,
                "raw": id + rest + "\r\n" + pdu,
                "pdu": pdu
        };

        switch(atMessageDescriptor.id){
                case "+CMGR":
                        var match= rest.match(/^:\ ?([0-9]+),[0-9]*,([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "stat": parseInt(match[1]),
                                "length": parseInt(match[2])
                        });
                        break;
                case "+CMT":
                        var match= rest.match(/^:\ ?(?:.+)?,([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "length": parseInt(match[1])
                        });
                        break;
                case "+CDS":
                        var match= rest.match(/^:\ ?([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "length": parseInt(match[1])
                        });
                        break;
                default:
        }

        return atMessageDescriptor;

};

KnownMessage= 'ID' 'REST' function(id, rest){

        var atMessageDescriptor= {
                "id": id,
                "raw": id + rest
        };

        switch(atMessageDescriptor.id){
                case "+CMTI":
                        var match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "mem": match[1],
                                "index": parseInt(match[2])
                        });
                        break;
                case "+CDSI":
                        var match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "mem": match[1],
                                "index": parseInt(match[2])
                        });
                        break;
                case "+CPIN":
                        Object.assign( atMessageDescriptor, {
                                "pinState": rest.match(/^:\ ?([\ A-Z]+)$/)[1]
                        });
                        break;
                case "^SIMST":
                        var match= rest.match(/^:\ ?([0-9]+)(?:,([01]))?$/);
                        var lock= undefined;
                        if( match[2] !== undefined ) lock= (match[2] === "1")
                        Object.assign( atMessageDescriptor, {
                                "simState": parseInt(match[1]),
                                "lock": lock
                        });
                        break;
                case "^SRVST":
                        Object.assign( atMessageDescriptor, {
                                "serviceStatus": parseInt(rest.match(/^:\ ?([0-9]+)$/)[1])
                        });
                        break;
                case "+CMEE":
                        Object.assign( atMessageDescriptor, {
                                "reportMode": parseInt(rest.match(/^:\ ?([0-9]+)$/)[1])
                        });
                        break;
                case "^CPIN":
                        var match= rest.match(/^:\ ?([\ A-Z]+),((?:[0-9]+)?),([0-9]+),([0-9]+),([0-9]+),([0-9]+)$/);
                        var times= undefined;
                        if( match[2] !== "" ) times= parseInt(match[2]);
                        Object.assign( atMessageDescriptor, {
                                "pinState": match[1],
                                "times": times,
                                "pukTimes": parseInt(match[3]),
                                "pinTimes": parseInt(match[4]),
                                "puk2Times": parseInt(match[5]),
                                "pin2Times": parseInt(match[6])
                        });
                        break;
                case "^SYSINFO":
                        var match= rest.match(/:\ ?([0-9]+),([0-9]+),(0|1),([0-9]+),([0-9]+)(?:,(0|1)?(?:,([0-9]+))?)?$/);

                        var cardLock= undefined;

                        if( match[6] !== undefined ) cardLock= ( match[6] === "1" );

                        var sysSubMode= undefined;

                        if( match[7] !== undefined ) sysSubMode= parseInt(match[7]);

                        Object.assign( atMessageDescriptor, {
                                "serviceStatus": parseInt(match[1]),
                                "serviceDomain": parseInt(match[2]),
                                "isRoaming": match[3] === "1",
                                "sysMode": parseInt(match[4]),
                                "simState": parseInt(match[5]),
                                "cardLock": cardLock,
                                "sysSubMode": sysSubMode
                        });
                        break;
                case "^MODE":
                        var match= rest.match(/^:\ ?([0-9]+),([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "sysMode": parseInt(match[1]),
                                "sysSubMode": parseInt(match[2])
                        });
                        break;
                case "+CMGS":
                        var match= rest.match(/^:\ ?([0-9]+)(?:,.*)?/);
                        Object.assign( atMessageDescriptor, {
                                "mr": parseInt(match[1])
                        });
                        break;
                case "+CPBS":

                        var match= rest.match(/:\ ?"([A-Z]{2})"(?:,([0-9]+)?(?:,([0-9]+))?)?$/);

                        var used= undefined;

                        if( match[2] !== undefined ) used= parseInt(match[2]);

                        var total= undefined;

                        if( match[3] !== undefined ) total= parseInt(match[3]);

                        Object.assign( atMessageDescriptor, {
                                "storage": match[1],
                                "used": used,
                                "total": total
                        });
                        
                        break;
                default:
        }

        return atMessageDescriptor;

};

%mode LALR

Program= Instructions function(instructions){

        this.atMessageDescriptors= instructions;

};

Instructions= Instructions Instruction function(instructions, instruction){

        instructions.push(instruction);
        return instructions;

} | Instruction function(instruction){

        return [ instruction ];

};

Instruction= 'SEP' FinalResultCode 'SEP' function(_, message){

        message.raw= "\r\n" + message.raw + "\r\n";

        return message;

} | 'SEP' ListMessageWrapMultiline 'SEP' function(_, messages){

        var raw= "\r\n";

        messages.forEach(function(message){
                raw+= message.raw;
        });

        raw+= "\r\n";

        return {
                "id": "AT_LIST",
                "raw": raw,
                "atMessageDescriptors": messages
        };


} | 'SEP' MessageWrap 'SEP' function(_, message){

        message.raw= "\r\n" + message.raw + "\r\n";

        return message;

} | 'SEP' 'INVITE' function(){

        return {
                "id": "INVITE",
                "raw": "\r\n> "
        };

} | 'ECHO' function(atCommand){

        return {
                "id": "ECHO",
                "raw": atCommand
        };

} | ListCmgl 'SEP' function(messages){

        var raw= "";

        messages.forEach(function(message){
                raw+= message.raw;
        });

        raw+= "\r\n";

        return {
                "id": "AT_LIST",
                "raw": raw,
                "atMessageDescriptors": messages
        };

};


ListCmgl= ListCmgl Cmgl function(messages, message){

        messages.push(message);

        return messages;

} | Cmgl function(message){

        return [ message ];

};


Cmgl= 'SEP' 'CMGL' 'REST' 'SEP' 'PDU' function(_ ,_ ,rest ,_ , pdu ){

        var match= rest.match(/^:\ ?([0-9]+),([0-9]+),(?:[0-9]+)?,([0-9]+)$/);

        return {
                "id": "CMGL",
                "raw": "\r\n+CMGL" + rest + "\r\n" + pdu,
                "index": parseInt(match[1]),
                "stat": parseInt(match[2]),
                "length": parseInt(match[3]),
                "pdu": pdu
        };

};


ListMessageWrapMultiline=  ListMessageWrapMultiline MessageWrapMultiline function(messages, message){

        messages.push(message);
        return messages;

} | MessageWrapMultiline function(message){
        return [ message ];
};

MessageWrap= Message function(message){ return message; }
| Error Message function(error, message){
        message.error= error;
        return message;
};

MessageWrapMultiline= KnownMessageMultiLine function(message){ return message; } 
| Error KnownMessageMultiLine function(error, message){
        message.error= error;
        return message;
};

 
Message= KnownMessage function(message){ return message; }
| KnownMessagePdu function(message){ return message; }
| UnknownMessage function(message){ return message; };


FinalResultCode= Error | 'FINAL_RESULT_CODE' function(finalResultCode){

        return {
                "raw": finalResultCode,
                "id": finalResultCode.replace(/\ /g, "_")
        };

};

Error= 'ERROR' function(){

        return {
                "id": "ERROR",
                "raw": "ERROR"
        };

} | 'CME_ERROR' function(code){

        return {
                "id": "CME_ERROR",
                "raw": "+CME ERROR: " + code.toString(),
                "code": code
        };

} | 'CMS_ERROR' function(code){

        return {
                "id": "CMS_ERROR",
                "raw": "+CMS ERROR: " + code.toString(),
                "code": code
        };

};

UnknownMessage= 'REST' function(rest){
        return { "raw": rest };
};

KnownMessageMultiLine= 'ID_MULTILINE' 'REST' 'SEP' function(id, rest){

        var atMessageDescriptor= {
                "id": "",
                "raw": id.prefix + id.name + rest + "\r\n"
        };

        if( id.prefix === "^" ) atMessageDescriptor.id+="HUAWEI_";

        atMessageDescriptor.id+= id.name;

        switch(atMessageDescriptor.id){
                case "CNUM":
                        var match= rest.match(/^:\ ?"([^"]*)","([^"]*)",([0-9]+).*$/);
                        var isNational= undefined;
                        if( match[3] === "129" ) isNational= true
                        else if( match[3] === "145" ) isNational= false
                        Object.assign( atMessageDescriptor, {
                                "alpha": match[1],
                                "number": match[2],
                                "isNational": isNational
                        });
                        break;
                default:
        }

        return atMessageDescriptor;

};

KnownMessagePdu= 'ID_PDU' 'REST' 'SEP' 'PDU' function(id, rest, _, pdu){

        var atMessageDescriptor= {
                "id": "",
                "raw": id.prefix + id.name + rest + "\r\n" + pdu,
                "pdu": pdu
        };

        if( id.prefix === "^" ) atMessageDescriptor.id+="HUAWEI_";

        atMessageDescriptor.id+= id.name;

        switch(atMessageDescriptor.id){
                case "CMGR":
                        var match= rest.match(/^:\ ?([0-9]+),[0-9]*,([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "stat": parseInt(match[1]),
                                "length": parseInt(match[2])
                        });
                        break;
                case "CMT":
                        var match= rest.match(/^:\ ?(?:.+)?,([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "length": parseInt(match[1])
                        });
                        break;
                case "CDS":
                        var match= rest.match(/^:\ ?([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "length": parseInt(match[1])
                        });
                        break;
                default:
        }

        return atMessageDescriptor;

};

KnownMessage= 'ID' 'REST' function(id, rest){

        var atMessageDescriptor= {
                "id": "",
                "raw": id.prefix + id.name + rest
        };

        if( id.prefix === "^" ) atMessageDescriptor.id+="HUAWEI_";

        atMessageDescriptor.id+= id.name;

        switch(atMessageDescriptor.id){
                case "CMTI":
                        var match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "mem": match[1],
                                "index": parseInt(match[2])
                        });
                        break;
                case "CDSI":
                        var match= rest.match(/^:\ ?"([A-Z]{2})",([0-9]+)$/);
                        Object.assign( atMessageDescriptor, {
                                "mem": match[1],
                                "index": parseInt(match[2])
                        });
                        break;
                case "CPIN":
                        Object.assign( atMessageDescriptor, {
                                "pinState": rest.match(/^:\ ?([\ A-Z]+)$/)[1].replace(/\ /g, "_")
                        });
                        break;
                case "HUAWEI_SIMST":
                        var match= rest.match(/^:\ ?([0-9]+)(?:,([01]))?$/);
                        var lock= undefined;
                        if( match[2] !== undefined ) lock= (match[2] === "1")
                        Object.assign( atMessageDescriptor, {
                                "simState": parseInt(match[1]),
                                "lock": lock
                        });
                        break;
                case "HUAWEI_SRVST":
                        Object.assign( atMessageDescriptor, {
                                "serviceStatus": parseInt(rest.match(/^:\ ?([0-9]+)$/)[1])
                        });
                        break;
                case "CMEE":
                        Object.assign( atMessageDescriptor, {
                                "reportMode": parseInt(rest.match(/^:\ ?([0-9]+)$/)[1])
                        });
                        break;
                case "HUAWEI_CPIN":
                        var match= rest.match(/^:\ ?([\ A-Z]+),((?:[0-9]+)?),([0-9]+),([0-9]+),([0-9]+),([0-9]+)$/);
                        var times= undefined;
                        if( match[2] !== "" ) times= parseInt(match[2]);
                        Object.assign( atMessageDescriptor, {
                                "pinState": match[1].replace(/\ /g, "_"),
                                "times": times,
                                "pukTimes": parseInt(match[3]),
                                "pinTimes": parseInt(match[4]),
                                "puk2Times": parseInt(match[5]),
                                "pin2Times": parseInt(match[6])
                        });
                        break;
                case "HUAWEI_SYSINFO":
                        var match= rest.match(/^:\ ?([0-9]+),([0-9]+),([01]),([0-9]+),([0-9]+).*$/);
                        Object.assign( atMessageDescriptor, {
                                "serviceStatus": parseInt(match[1]),
                                "serviceDomain": parseInt(match[2]),
                                "isRoaming": match[3] === "1",
                                "sysMode": parseInt(match[4]),
                                "simState": parseInt(match[5])
                        });
                        break;
                case "CMGS":
                        var match= rest.match(/^:\ ?([0-9]+)(?:,.*)?/);
                        Object.assign( atMessageDescriptor, {
                                "mr": parseInt(match[1])
                        });
                        break;
                default:
        }

        return atMessageDescriptor;

};
